{"version":3,"sources":["services/persons.js","components/Filter.js","components/AddPerson.js","components/PersonForm.js","components/PersonList.js","components/Notification.js","components/ErrorMessage.js","App.js","serviceWorker.js","index.js"],"names":["baseUrl","axios","get","newObject","post","id","put","delete","Filter","handleFilterChange","onChange","AddPerson","persons","newName","newNumber","setNewName","setNewNumber","setPersons","setNotification","setErrorMessage","nameCheck","filter","person","name","length","personObject","number","personService","then","setTimeout","concat","catch","error","response","data","window","confirm","find","n","changedUnit","alert","PersonForm","handleNameChange","handleNumberChange","onSubmit","event","preventDefault","value","type","PersonList","map","item","toLowerCase","includes","key","onClick","remove","Notification","message","className","ErrorMessage","App","useState","setFilter","errorMessage","notification","useEffect","target","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.9656da90.chunk.js","sourcesContent":["import axios from 'axios'\r\nconst baseUrl = '/api/persons'\r\n\r\nconst getAll = () => {\r\n    return axios.get(baseUrl)\r\n  }\r\n  \r\n  const create = newObject => {\r\n    return axios.post(baseUrl, newObject)\r\n  }\r\n\r\n  const remove = (id) => {\r\n      return axios.delete(`${baseUrl}/${id}`)\r\n  }\r\n  \r\n  const update = (id, newObject) => {\r\n    return axios.put(`${baseUrl}/${id}`, newObject)\r\n  }\r\n  \r\n  export default { \r\n    getAll: getAll, \r\n    create: create, \r\n    update: update,\r\n    remove:remove\r\n  }","import React from 'react'\r\n\r\nconst Filter = ({handleFilterChange}) => {\r\n  return (\r\n    <div>\r\n      filter shown with\r\n       <input\r\n        onChange={handleFilterChange}\r\n       />\r\n    </div>\r\n  )   \r\n}\r\nexport default Filter","import personService from '../services/persons'\r\n\r\nconst AddPerson = ({persons, newName, newNumber, setNewName, setNewNumber,setPersons, setNotification, setErrorMessage}) => { \r\n  const nameCheck = persons.filter(function(person){\r\n      return person.name === newName\r\n    })\r\n    if (nameCheck.length === 0 && newName !== ''){\r\n      const personObject = {\r\n        name: newName, number: newNumber\r\n      }\r\n      personService\r\n        .create(personObject)\r\n        .then(() => {\r\n          setNotification(\r\n            `Added '${personObject.name}'`\r\n          )\r\n          setTimeout(() => {\r\n            setNotification(null)\r\n          }, 5000)\r\n          setPersons(persons.concat(personObject))\r\n          setNewName('')\r\n          setNewNumber('')\r\n        })\r\n        .catch(error => {\r\n          setNotification(null)\r\n          setErrorMessage(error.response.data.error)\r\n          setTimeout(() => {setErrorMessage(null)}, 4000)\r\n        })\r\n      \r\n    }else if(nameCheck.length !== 0 && newName !== ''){\r\n      if(window.confirm(`${newName} is already added to phonebook, replace the old number with a new one?`)){\r\n        const person = persons.find(n=>n.name === newName)\r\n        const changedUnit = {...person, number: newNumber}\r\n        personService\r\n          .update(person.id, changedUnit)\r\n          .then(()=>{\r\n            setNotification(\r\n              `Updated '${changedUnit.name}'`\r\n            )\r\n            setTimeout(() => {\r\n              setNotification(null)\r\n            }, 5000)\r\n            personService\r\n            .getAll()\r\n            .then(response => {\r\n            setPersons(response.data)\r\n          })\r\n      }, [])\r\n\r\n      }\r\n    }else{\r\n      window.alert('name is empty')\r\n    }\r\n}\r\n\r\nexport default AddPerson","import React from 'react'\r\nimport AddPerson from './AddPerson'\r\n\r\nconst PersonForm = ({ handleNameChange, handleNumberChange, newNumber, newName,\r\n   setNewName, setNewNumber, persons, setPersons, setNotification, setErrorMessage}) =>{\r\n    return(\r\n    <form onSubmit={(event) => {event.preventDefault(); AddPerson({persons, newName, newNumber, setNewName,\r\n     setNewNumber, setPersons, setNotification, setErrorMessage})}}>\r\n      <div>\r\n        name:<input\r\n          value={newName} \r\n          onChange={handleNameChange}\r\n      /></div>\r\n      <div>\r\n        number:<input\r\n          value={newNumber} \r\n          onChange={handleNumberChange}\r\n      /></div>\r\n      <div><button type=\"submit\">add</button></div>\r\n    </form>\r\n  )\r\n}\r\n\r\nexport default PersonForm","import React from 'react'\r\nimport personService from '../services/persons'\r\n\r\nconst PersonList = ({persons, filter,setPersons, setNotification, setErrorMessage}) => {\r\n\r\n  const remove = (item) => {\r\n    personService\r\n      .remove(item.id)\r\n      .then(()=>{\r\n        setNotification(\r\n          `Deleted ${item.name}`\r\n        )\r\n        setTimeout(() => {\r\n          setNotification(null)\r\n        }, 5000)\r\n        personService\r\n        .getAll()\r\n        .then(response => {\r\n        setPersons(response.data)\r\n      })\r\n  }, [])\r\n    .catch(error => {\r\n      setErrorMessage(\r\n        `Information of ${item.name} has already been removed from server`\r\n      )\r\n\r\n    })\r\n  }\r\n    return (\r\n        <div>\r\n        {persons.map(item => {\r\n          const check = item.name.toLowerCase()\r\n          if(check.includes(filter)){\r\n            return <p key={item.name}>\r\n              {item.name} {item.number}\r\n              <button onClick = {() => {\r\n                if(window.confirm(`delete ${item.name} ?`)){\r\n                  remove(item)\r\n                  }}}>\r\n                  delete\r\n              </button>\r\n            </p>\r\n          }return null\r\n          })}\r\n      </div>\r\n    )\r\n}\r\n\r\nexport default PersonList","import React from 'react'\r\n\r\nconst Notification = ({ message }) => {\r\n    if (message === null) {\r\n      return null\r\n    }\r\n  \r\n    return (\r\n      <div className=\"notification\">\r\n        {message}\r\n      </div>\r\n    )\r\n  }\r\n\r\nexport default Notification","import React from 'react'\r\n\r\nconst ErrorMessage = ({ message }) => {\r\n    if (message === null) {\r\n      return null\r\n    }\r\n  \r\n    return (\r\n      <div className=\"error\">\r\n        {message}\r\n      </div>\r\n    )\r\n  }\r\n\r\nexport default ErrorMessage","import React, { useState, useEffect } from 'react'\nimport personService from './services/persons'\nimport Filter from './components/Filter'\nimport PersonForm from './components/PersonForm'\nimport PersonList from './components/PersonList'\nimport Notification from './components/Notification'\nimport ErrorMessage from './components/ErrorMessage'\n\n\nconst App = () => {\n  const [ persons, setPersons] = useState([])\n  const [ newNumber, setNewNumber ] = useState('')\n  const [ newName, setNewName ] = useState('')\n  const [ filter, setFilter] = useState('')\n  const [errorMessage, setErrorMessage] = useState(null)\n  const [notification, setNotification] = useState(null)\n\n  const handleNameChange = (event) => setNewName(event.target.value)\n  const handleNumberChange = (event) => setNewNumber(event.target.value)\n  const handleFilterChange = (event) => setFilter(event.target.value.toLowerCase())\n\n  useEffect(() => {\n    personService\n      .getAll()\n      .then(response => {\n        setPersons(response.data)\n      })\n  }, [])\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification message = {notification}/>\n      <ErrorMessage message = {errorMessage}/>\n      <Filter \n        handleFilterChange = {handleFilterChange}\n      />\n      <h2>add a new</h2>\n      <PersonForm\n        handleNameChange = {handleNameChange}\n        handleNumberChange = {handleNumberChange}\n        persons = {persons} setPersons = {setPersons}\n        newName = {newName} setNewName = {setNewName}\n        newNumber = {newNumber} setNewNumber = {setNewNumber}\n        setNotification = {setNotification} setErrorMessage = {setErrorMessage}\n      />\n      <h2>Numbers</h2>\n      <PersonList\n        filter = {filter}\n        persons = {persons}\n        setPersons = {setPersons}\n        setNotification = {setNotification}\n        setErrorMessage = {setErrorMessage}\n      />\n    </div>\n  )\n\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}